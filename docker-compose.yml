services:
  # Traefik reverse proxy - Production configuration
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "443:443"
    command:
      # API and Dashboard (now secure)
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--accesslog=true"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=mlops-network"
      # Entrypoints (HTTP and HTTPS)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirection
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Let's Encrypt configuration
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      # Global HTTP to HTTPS redirection
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # Traefik dashboard router (secure)
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      # Basic Auth middleware for the dashboard
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASHED}"

  # PostgreSQL for MLflow
  postgres-mlflow:
    image: postgres:13
    environment:
      POSTGRES_USER: ${MLFLOW_DB_USER}
      POSTGRES_PASSWORD: ${MLFLOW_DB_PASSWORD}
      POSTGRES_DB: ${MLFLOW_DB_NAME}
    volumes:
      - postgres-mlflow-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - mlops-network

  # MLflow tracking server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://${MLFLOW_DB_USER}:${MLFLOW_DB_PASSWORD}@postgres-mlflow:5432/${MLFLOW_DB_NAME}
      --default-artifact-root /mlflow/artifacts
      --serve-artifacts
    depends_on:
      - postgres-mlflow
    volumes:
      - mlflow-data:/mlflow/artifacts
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mlflow.rule=Host(`mlflow.${DOMAIN_NAME}`)"
      - "traefik.http.routers.mlflow.entrypoints=websecure"
      - "traefik.http.routers.mlflow.tls.certresolver=myresolver"
      - "traefik.http.services.mlflow.loadbalancer.server.port=5000"

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN_NAME}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Prefect orchestration server
  prefect:
    image: prefecthq/prefect:3-latest
    command: prefect server start --host 0.0.0.0 --port 4200
    environment:
      PREFECT_UI_API_URL: https://prefect.${DOMAIN_NAME}/api
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_SERVER_API_PORT: 4200
      PREFECT_HOME: /opt/prefect
    volumes:
      - prefect-data:/opt/prefect
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prefect.rule=Host(`prefect.${DOMAIN_NAME}`)"
      - "traefik.http.routers.prefect.entrypoints=websecure"
      - "traefik.http.routers.prefect.tls.certresolver=myresolver"
      - "traefik.http.services.prefect.loadbalancer.server.port=4200"

  # FastAPI application
  api:
    image: ghcr.io/kingabzpro/a-to-z-mlops:main
    env_file:
      - .env
    environment:
      # Use internal Docker network URLs for service-to-service communication
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PREFECT_API_URL: http://prefect:4200/api
    depends_on:
      - mlflow
      - prefect
    restart: unless-stopped
    networks:
      - mlops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=7860"

  # Locust is a testing tool and typically not deployed to production.
  # It is commented out but can be enabled for staging/testing environments.
  # locust:
  #   ...

volumes:
  prometheus-data:
  grafana-data:
  mlflow-data:
  prefect-data:
  postgres-mlflow-data:
  traefik-certs:

networks:
  mlops-network:
    driver: bridge